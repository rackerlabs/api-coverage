<j:jelly xmlns:j="jelly:core">
    <div id="steps">${it.Steps}</div>

    <div id="cluster_content"></div>

    <input type="hidden" value="${it.Template}" id="graph-data"/>

    <script type="text/javascript">
    $(function() {
        var elem = document.getElementById('steps');
        elem.style.display = 'none';
        //create content
        var div = document.createElement('div');
        div.id = "sample-content";
        if (document.getElementById("sample-content") === null) {
            document.getElementById('cluster_content').appendChild(div);
        }
        //create a new script tag
        var jsGraphviz = document.createElement('script');
        jsGraphviz.type = "text/vnd.graphviz";
        jsGraphviz.id = "sample";
        var first = document.getElementsByTagName('script')[0];
        if (document.getElementById("sample") === null) {
            first.parentNode.insertBefore(jsGraphviz, first);
            jsGraphviz.innerHTML = $('#graph-data').val();
            $('#' + div.id).append(render("sample", "svg")); //this renders a role
            document.getElementById("sample").setAttribute('width', '1000px');
        } else {
            document.getElementById(data.id).innerHTML = $('#graph-data').val();
            $('#' + div.id).html(render("sample", "svg")); //this renders a role
            document.getElementById("sample").setAttribute('width', '1000px');
        }

        coverPath();
    });


    function coverPath() {
        console.log($('#steps').text());
        var steps = $('#steps').text().split("\n");
        console.log(steps.length);
        for (var i = 0, max = steps.length; i &lt; max; i++) {
            var step = JSON.parse(steps[i]).steps;
            console.log(step);
            for (var j = 0, step_total = step.length; j &lt; step_total; j++) {
                //because we don't highlight failure cases, this would break. So check
                var nodeInGraph = $("#cluster_content title").filter(function() {
                    return ($(this).text() === step[j])
                });
                console.log(nodeInGraph);
                if (nodeInGraph[0] !== undefined) {
                    //get step. color it blue
                    var ellipse = nodeInGraph[0].nextElementSibling;
                    ellipse.setAttribute('fill', 'lightblue');
                    if (j + 1 &lt; step_total) {
                        var pathInGraph = $("#cluster_content title").filter(function() {
                            return ($(this).text() === step[j] + '->' + step[j + 1])
                        });
                        console.log('path', pathInGraph);
                        if (pathInGraph[0] !== undefined) {
                            //get step. color it blue
                            var path = pathInGraph[0].nextElementSibling;
                            if (path.getAttribute('stroke-width') == null) {
                                console.log('stroke width is empty');
                                path.setAttribute('stroke-width', '1');
                                var color = path.getAttribute('stroke');
                                path.setAttribute('stroke', "rgb(255,153,51)");
                                console.log('stroke', path.getAttribute('stroke'));
                            } else if(parseInt(path.getAttribute('stroke-width')) &lt; 10){
                                var width = parseInt(path.getAttribute('stroke-width')) + 1
                                console.log('stroke width', width);
                                path.setAttribute('stroke-width', width + "");
                                var color = path.getAttribute('stroke');
                                path.setAttribute('stroke', incrementColor(color));
                                console.log('stroke', path.getAttribute('stroke'));
                            }
                        }
                    }
                }
            }
        }
    }


    function render(id, format) {
        var result;
        try {
            return Viz(src(id), format);
        } catch (e) {
            return inspect(e.toString());
        }
    }

    function incrementColor(rgb){
        var mycolors = rgb.slice(4,-1).split(',');
        var newColor = "";
        var r = parseInt(mycolors[0]);
        var g = parseInt(mycolors[1]);
        var b = parseInt(mycolors[2]);
        if (r > 0 &amp;&amp; r >= g){
        newColor = "rgb(" + (r-1) + "," + g + "," + b + ")";
        } else if(g > 0 &amp;&amp; g >= b) {
        newColor = "rgb(" + r + "," + (g - 1) + "," + b + ")";
        } else if(b > 0) {
        newColor = "rgb(" + r + "," + g + "," + (b - 1) + ")";
        } else {
        newColor = "rgb(0,0,0)";
        }
        return newColor;
    }

    function inspect(s) {
        return "&lt;pre&gt;" + s.replace(/&lt;/g, "&lt;").replace(/&gt;/g, "&gt;") + "&lt;/pre&gt;"
    }

    function src(id) {
        return document.getElementById(id).innerHTML;
    }

    var failedNodes = ['METHOD_FAIL', 'URL_FAIL', 'CONTENT_TYPE_FAIL']
    var positiveNodes = ['ACCEPT']
    </script>

</j:jelly>